@page "{id?}"
@model CoffeeShop.Areas.Shared.Pages.Order.OrderPageModel
@{
    ViewData["Title"] = "Order Coffee";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
<link rel="stylesheet" href="~/css/OrderPageScriptStyle.css" asp-append-version="true" />

<div class="order-page-container">
    <div class="row">
        <div class="col-12">
            <div class="page-header">
                <h1 class="page-title">Coffee Menu</h1>
                <p class="page-subtitle">Select your favorite coffee and treats</p>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Category Navigation -->
        <div class="col-12 mb-4">
            <div class="category-nav">
                <button class="category-btn active" id="all-products" data-category-id="0">
                    <i class="bi bi-grid-3x3"></i> All Items
                </button>
                @foreach (var category in Model.Category)
                {
                    <button class="category-btn category-filter" data-category-id="@category.CategoryID">
                        <i class="bi bi-cup-hot"></i> @category.CategoryName
                    </button>
                }
            </div>
        </div>
        
        <!-- Main Content Area -->
        <div class="col-lg-8 col-md-8 col-sm-12">
            <div class="product-grid">
                @foreach (var product in Model.Product)
                {
                    var productSize = Model.ProductSize?
                    .Where(ps => ps.ProductID == product.ProductID)
                    .OrderBy(ps => ps.SizeID)
                    .FirstOrDefault();

                    <div class="product-card" data-category-id="@product.CategoryID">
                        <div class="product-image">
                            <img src="@product.ImageUrl" alt="@product.ProductName" />
                            @if (productSize != null)
                            {
                                <div class="product-price">
                                    <span>@product.FormattedPrice</span>
                                </div>
                            }
                        </div>
                        <div class="product-details">
                            <h3 class="product-name">@product.ProductName</h3>
                            @if (productSize != null)
                            {
                                <button class="add-to-cart-btn" data-product-id="@product.ProductID"
                                        data-product-name="@product.ProductName"
                                        data-product-price="@productSize.Price"
                                        data-product-sizes='@Html.Raw(Json.Serialize(Model.ProductSize
                                         .Where(p => p.ProductID == product.ProductID)
                                         .Select(p => new { SizeID = p.SizeID, Price = p.Price })
                                         .ToList()))'>
                                    <i class="bi bi-plus-circle"></i> Add to Cart
                                </button>
                            }
                            else
                            {
                                <button class="add-to-cart-btn disabled" disabled>
                                    <i class="bi bi-x-circle"></i> Not Available
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Cart Sidebar -->
        <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="cart-sidebar">
                <div class="cart-header">
                    <h2><i class="bi bi-cart3"></i> Your Order</h2>
                </div>
                
                <div class="cart-empty" id="cart-empty">
                    <div class="empty-cart-icon">
                        <i class="bi bi-cart-x"></i>
                    </div>
                    <p>Your cart is empty</p>
                    <p class="empty-cart-hint">Add some delicious items to get started!</p>
                </div>
                
                <div class="cart-items" id="cart-items"></div>
                
                <div class="cart-summary" id="cart-total">
                    <div class="cart-total">
                        <span>Total</span>
                        <span id="total-price">0 VND</span>
                    </div>
                </div>
                
                <div class="cart-actions">
                    <button class="checkout-btn" id="checkout-button" disabled>
                        <i class="bi bi-credit-card"></i> Checkout
                    </button>
                    
                    @if (Model.TableId != null)
                    {
                        <a asp-area="@(User.IsInRole("Admin") ? "Admin" : "Customer")"
                           asp-page="/Chats/Chat"
                           asp-route-tableId="@Model.TableId"
                           class="chat-btn">
                            <i class="bi bi-chat-dots"></i> Chat with Staff
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Size Selection Modal -->
<div class="modal fade" id="size-modal" tabindex="-1" aria-labelledby="sizeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sizeModalLabel">Select Size</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="size-options" class="size-options-container"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirm-add-to-cart" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Add to Cart
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        function formatPrice(price) {
            return price.toLocaleString('vi-VN'); 
        }

        const categoryButtons = document.querySelectorAll('.category-btn');

        categoryButtons.forEach(button => {
            button.addEventListener('click', function (event) {
                event.preventDefault();
                const categoryId = this.getAttribute('data-category-id');
                filterProductsByCategory(categoryId);

                categoryButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
            });
        });

        function filterProductsByCategory(categoryId) {
            document.querySelectorAll('.product-card').forEach(productCard => {
                if (categoryId === '0' || productCard.getAttribute('data-category-id') === categoryId) {
                    productCard.style.display = 'block';
                } else {
                    productCard.style.display = 'none';
                }
            });
        }

        const urlParts = window.location.pathname.split('/');
        const tableId = urlParts[urlParts.length - 1];

        if (isNaN(tableId) || tableId <= 0) {
            console.log('No table ID found in URL');
            document.getElementById('cart-empty').style.display = 'flex';
            document.getElementById('cart-items').style.display = 'none';
            document.getElementById('cart-total').style.display = 'none';
            document.getElementById('checkout-button').disabled = true;

            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.disabled = true;
                button.classList.add('disabled');
            });
            return;
        }

        if (tableId == '1') {
            const chatBtn = document.querySelector('.chat-btn');
            if (chatBtn) {
                chatBtn.style.display = 'none';
            }
        }


        const savedCartTime = localStorage.getItem(`cart-time-${tableId}`);
        const currentTime = new Date().getTime();

        const cartExpirationTime = 5 * 60 * 1000;
        if (savedCartTime && (currentTime - savedCartTime > cartExpirationTime)) {
            localStorage.removeItem(`cart-${tableId}`);
            localStorage.removeItem(`cart-time-${tableId}`);
            console.log('Cart data for table ' + tableId + ' expired and removed from localStorage');
        }

        const savedCart = localStorage.getItem(`cart-${tableId}`);
        let cart = savedCart ? JSON.parse(savedCart) : [];

        localStorage.setItem(`cart-time-${tableId}`, currentTime);

        cart = cart.filter(item => item.productId && item.productName && item.productPrice && item.quantity && item.size);
        updateCartUI(cart);

        let selectedProduct = null;

        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', function () {
                selectedProduct = {
                    productId: this.dataset.productId,
                    productName: this.dataset.productName,
                    productPrice: parseFloat(this.dataset.productPrice),
                    productSizes: JSON.parse(this.dataset.productSizes)
                };

                const sizeOptionsDiv = document.getElementById('size-options');
                sizeOptionsDiv.innerHTML = '';

                const sizeLabels = { 1: 'S', 2: 'M', 3: 'L' };

                selectedProduct.productSizes.forEach(size => {
                    const sizeLabel = sizeLabels[size.sizeID] || `Size ${size.sizeID}`;
                    const sizeOption = document.createElement('div');
                    sizeOption.className = 'size-option';
                    sizeOption.innerHTML = `
                        <input type="radio" name="size" value="${size.sizeID}" data-price="${size.price}" id="size-${size.sizeID}">
                        <label for="size-${size.sizeID}">
                            <span class="size-name">${sizeLabel}</span>
                            <span class="size-price">${size.price.toLocaleString('vi-VN')} VND</span>
                        </label>
                    `;
                    sizeOptionsDiv.appendChild(sizeOption);
                });

                // Select the first size by default
                const firstSizeOption = sizeOptionsDiv.querySelector('input[type="radio"]');
                if (firstSizeOption) {
                    firstSizeOption.checked = true;
                }

                const sizeModal = new bootstrap.Modal(document.getElementById('size-modal'));
                sizeModal.show();
            });
        });

        document.getElementById('confirm-add-to-cart').addEventListener('click', function () {
            const selectedSize = document.querySelector('input[name="size"]:checked');
            if (selectedSize) {
                const sizeValue = selectedSize.value;
                const sizePrice = parseFloat(selectedSize.getAttribute('data-price'));
                const selectedProductSizeId = selectedProduct.productSizes.find(size => size.sizeID == sizeValue)?.productSizeId;

                const existingProduct = cart.find(item => item.productId === selectedProduct.productId && item.size === sizeValue);
                if (existingProduct) {
                    existingProduct.quantity += 1;
                } else {
                    cart.push({
                        productId: selectedProduct.productId,
                        productName: selectedProduct.productName,
                        productPrice: sizePrice,
                        quantity: 1,
                        size: sizeValue,
                        productSizeId: selectedProductSizeId
                    });
                }
                console.log(cart);
                updateCartUI(cart);
                $('#size-modal').modal('hide');
            } else {
                alert('Please select a size');
            }
        });

        function updateCartUI(cart) {
            const cartItemsDiv = document.getElementById('cart-items');
            const cartEmptyDiv = document.getElementById('cart-empty');
            const cartTotalDiv = document.getElementById('cart-total');
            const checkoutButton = document.getElementById('checkout-button');
            let totalPrice = 0;

            cartItemsDiv.innerHTML = '';
            if (cart.length === 0) {
                cartEmptyDiv.style.display = 'flex';
                cartItemsDiv.style.display = 'none';
                cartTotalDiv.style.display = 'none';
                checkoutButton.disabled = true;
            } else {
                cartEmptyDiv.style.display = 'none';
                cartItemsDiv.style.display = 'block';
                cartTotalDiv.style.display = 'block';
                checkoutButton.disabled = false;

                cart.forEach(item => {
                    const sizeLabels = { 1: 'S', 2: 'M', 3: 'L' };
                    const sizeLabel = sizeLabels[item.size] || `Size ${item.size}`;
                    
                    const productElement = document.createElement('div');
                    productElement.classList.add('cart-item');
                    productElement.innerHTML = `
                        <div class="cart-item-details">
                            <div class="cart-item-name">
                                <span>${item.productName}</span>
                                <span class="cart-item-size">${sizeLabel}</span>
                            </div>
                            <div class="cart-item-price">${item.productPrice.toLocaleString('vi-VN')} VND</div>
                        </div>
                        <div class="cart-item-actions">
                            <div class="quantity-controls">
                                <button class="quantity-btn minus" onclick="updateQuantity('${item.productId}', '${item.size}', 'decrease')">
                                    <i class="bi bi-dash"></i>
                                </button>
                                <span class="quantity">${item.quantity}</span>
                                <button class="quantity-btn plus" onclick="updateQuantity('${item.productId}', '${item.size}', 'increase')">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                            <button class="remove-btn" onclick="removeFromCart('${item.productId}', '${item.size}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <div class="cart-item-subtotal">
                            <span>${(item.productPrice * item.quantity).toLocaleString('vi-VN')} VND</span>
                        </div>
                    `;
                    cartItemsDiv.appendChild(productElement);
                    totalPrice += item.productPrice * item.quantity;
                });

                document.getElementById('total-price').innerText = totalPrice.toLocaleString('vi-VN') + ' VND';
            }

            localStorage.setItem(`cart-${tableId}`, JSON.stringify(cart));
        }


        window.removeFromCart = function (productId, size) {
            const productIndex = cart.findIndex(item => item.productId === productId && item.size === size);
            if (productIndex !== -1) {
                cart.splice(productIndex, 1);
                updateCartUI(cart);
            } else {
                console.error('Product not found in cart');
            }
        }

        window.updateQuantity = function (productId, size, action) {
            const item = cart.find(item => item.productId === productId && item.size === size);
            if (item) {
                if (action === 'increase') {
                    item.quantity += 1;
                } else if (action === 'decrease' && item.quantity > 1) {
                    item.quantity -= 1;
                }
                updateCartUI(cart);
            }
        }

        document.getElementById('checkout-button').addEventListener('click', function () {
            if (cart.length > 0) {
                window.location.href = `/Shared/Order/Cart?tableId=${tableId}`;
                sessionStorage.setItem('cart', JSON.stringify(cart));
            } else {
                alert('Your cart is empty!');
            }
        });
    });
</script>